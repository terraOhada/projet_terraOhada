// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  CANDIDATE
  ADMIN
  USER
  RECRUITER
  SUPER_ADMIN
}

enum Statut {
  VALIDE
  INCOMPLET
}

enum ContractType {
  CDI
  CDD
  STAGE
  FREELANCE
  ALTERNANCE
}

enum ExperienceLevel {
  DEBUTANT
  JUNIOR
  CONFIRME
  SENIOR
}

model User {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  email             String   @unique
  password          String
  nom               String
  prenom            String
  role              Role     @default(USER)
  photo             String?
  verifyOtp         String?  @default("")
  verifyOtpExpireAt Int?     @default(0)
  isAccountVerified Boolean  @default(false)
  resetOtp          String?  @default("")
  resetOtpExpireAt  Int?     @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // --- RELATIONS ---
  // Un utilisateur peut avoir un profil candidat détaillé
  profile      Profile?
  // Un utilisateur peut être le recruteur d'une entreprise
  company      Company?
  // Un utilisateur peut sauvegarder plusieurs offres
  savedJobs    SavedJob[]
  // Un utilisateur peut laisser plusieurs commentaires
  commentaires Commentaire[]
  // Un utilisateur peut effectuer plusieurs paiements
  payments     Payment[]
  // Un utilisateur peut faire plusieurs candidatures
  applications Application[]

  Favorite Favorite[]

  JobCommentaire JobCommentaire[]
}

/// Modèle pour les décisions juridiques de la cour OHADA
model Decision {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  idInterne       String  @unique // "ID interne" - Identifiant unique de la décision
  titreDecision   String // "Titre de la décision"
  juridiction     String // "Juridiction"
  dateDecision    String // "Date" - Stocké comme DateTime
  pays            String // "Pays"
  matiere         String // "Matière"
  resume          String? // "Résumé" - Optionnel, car le champ peut être vide
  lienSource      String? // "Lien source" - Optionnel
  statut          String // "Statut (validé/incomplet)" - Optionnel, pourrait être un Enum si les valeurs sont fixes
  article         String? // "Articles" - Optionnel
  articleMisAjour String? // "Articles mis à jour" - Utilisation de @map pour un nom de colonne différent
  typeDecision    String?

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  FavoriteBy   Favorite[]
  commentaires Commentaire[] // Opposite relation field added

  // Vous pouvez ajouter des index pour optimiser les requêtes
  @@index([pays])
  @@index([dateDecision])
  @@index([matiere])
  @@index([juridiction])
}

model Document {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  nomFichier String
  urlFichier String
  publicId   String?
  taille     Float
  typeMime   String
  dateUpload DateTime @default(now())
}

model Favorite {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId // ID de l'utilisateur
  decision   Decision @relation(fields: [decisionId], references: [id])
  decisionId String   @db.ObjectId // ID de la décision
  createdAt  DateTime @default(now())

  @@unique([userId, decisionId]) // Un utilisateur ne peut liker qu'une fois une décision
}

model Commentaire {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId // ID de l'utilisateur
  decisionId String   @db.ObjectId // ID de la décision
  contenu    String // Contenu du commentaire
  commentBy  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  decision Decision @relation(fields: [decisionId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
  Job      Job?     @relation(fields: [jobId], references: [id])
  jobId    String?  @db.ObjectId

  @@unique([userId, decisionId], name: "userId_decisionId") // Un utilisateur ne peut commenter qu'une fois une décision
  @@index([decisionId]) // Index pour optimiser les requêtes sur les décisions
  @@index([userId]) // Index pour optimiser les requêtes sur les utilisateurs
}

model Juristes {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  notionId          String   @unique
  name              String
  photo             String?
  country           String
  jobTitle          String
  specialties       String
  email             String   @unique
  phone             String
  structure         String?
  bio               String?
  experience        String?
  wantsContact      String[]
  structureSize     String[]
  exerciseStructure String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// Modèle pour vos plans (peut être synchronisé avec Flutterwave)
model Plan {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  planId   Int       @unique // L'ID numérique venant de Flutterwave
  name     String
  amount   Int // En centimes
  interval String
  // Relation: un plan peut être lié à plusieurs paiements
  payments Payment[]
}

// Modèle pour enregistrer chaque transaction
model Payment {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  transactionId Int    @unique // L'ID de transaction de Flutterwave, ex: 4958495
  txRef         String @unique // Votre référence unique, ex: sub-xxxxx
  status        String // "successful", "failed", "pending"
  amount        Int // En centimes
  currency      String

  // Relation avec l'utilisateur qui a payé
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  // Relation avec le plan souscrit
  planId String? @db.ObjectId // Optionnel si le paiement n'est pas lié à un plan
  plan   Plan?   @relation(fields: [planId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Job       Job?     @relation(fields: [jobId], references: [id])
  jobId     String?  @db.ObjectId
}

// Profil détaillé pour un CANDIDAT
model Profile {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  headline  String? // Ex: "Développeur Web Full-Stack"
  bio       String? // Description détaillée
  location  String? // Ex: "Bingerville, Abidjan"
  resumeUrl String? // URL du CV (PDF)

  // Relation un-à-un avec User
  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

// Entreprise gérée par un RECRUITER
model Company {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  description String?
  logoUrl     String?
  websiteUrl  String?
  location    String?

  // Relation un-à-un avec le recruteur
  recruiterId String @unique @db.ObjectId
  recruiter   User   @relation(fields: [recruiterId], references: [id])

  // Une entreprise a plusieurs offres
  jobs Job[]
}

// Offre d'emploi
model Job {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  location        String
  contractType    ContractType
  experienceLevel ExperienceLevel
  published       Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relation avec l'entreprise qui poste
  companyId String  @db.ObjectId
  company   Company @relation(fields: [companyId], references: [id])

  // Relations avec les actions des utilisateurs
  savedBy      SavedJob[]
  applications Application[]
  commentaires JobCommentaire[]
  // payments     Payment[] // Pour les offres sponsorisées
  Commentaire  Commentaire[]
  Payment      Payment[]
}

// =========================================
// MODÈLES DE LIAISON ET FONCTIONNALITÉS
// =========================================

// Candidature d'un User à un Job
model Application {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  status    String   @default("Soumise")
  appliedAt DateTime @default(now())

  jobId  String @db.ObjectId
  job    Job    @relation(fields: [jobId], references: [id])
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  @@unique([jobId, userId]) // Empêche de postuler deux fois
}

// Offre sauvegardée (votre "Favorite")
model SavedJob {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  savedAt DateTime @default(now())

  jobId  String @db.ObjectId
  job    Job    @relation(fields: [jobId], references: [id])
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  @@unique([jobId, userId]) // Empêche de sauvegarder deux fois
}

// Commentaire sur une offre d'emploi
model JobCommentaire {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  createdAt DateTime @default(now())

  // Qui a écrit le commentaire
  authorId String @db.ObjectId
  author   User   @relation(fields: [authorId], references: [id])

  // Sur quelle offre
  jobId String @db.ObjectId
  job   Job    @relation(fields: [jobId], references: [id])
}
