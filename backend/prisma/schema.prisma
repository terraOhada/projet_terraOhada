// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  SUPER_ADMIN
}

enum Statut {
  VALIDE
  INCOMPLET
}

model User {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  email             String   @unique
  password          String
  nom               String
  prenom            String
  role              Role     @default(USER)
  photo             String?
  verifyOtp         String?  @default("")
  verifyOtpExpireAt Int?     @default(0)
  isAccountVerified Boolean  @default(false)
  resetOtp          String?  @default("")
  resetOtpExpireAt  Int?     @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  favorites    Favorite[]
  commentaires Commentaire[] // Opposite relation field added
}

/// Modèle pour les décisions juridiques de la cour OHADA
model Decision {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  idInterne       String  @unique // "ID interne" - Identifiant unique de la décision
  titreDecision   String // "Titre de la décision"
  juridiction     String // "Juridiction"
  dateDecision    String // "Date" - Stocké comme DateTime
  pays            String // "Pays"
  matiere         String // "Matière"
  resume          String? // "Résumé" - Optionnel, car le champ peut être vide
  lienSource      String? // "Lien source" - Optionnel
  statut          String // "Statut (validé/incomplet)" - Optionnel, pourrait être un Enum si les valeurs sont fixes
  article         String? // "Articles" - Optionnel
  articleMisAjour String? // "Articles mis à jour" - Utilisation de @map pour un nom de colonne différent
  colonne1        String?

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  FavoriteBy   Favorite[]
  commentaires Commentaire[] // Opposite relation field added

  // Vous pouvez ajouter des index pour optimiser les requêtes
  @@index([pays])
  @@index([dateDecision])
  @@index([matiere])
  @@index([juridiction])
}

model Document {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  nomFichier String
  urlFichier String
  publicId   String?
  taille     Float
  typeMime   String
  dateUpload DateTime @default(now())
}

model Favorite {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId // ID de l'utilisateur
  decision   Decision @relation(fields: [decisionId], references: [id])
  decisionId String   @db.ObjectId // ID de la décision
  createdAt  DateTime @default(now())

  @@unique([userId, decisionId]) // Un utilisateur ne peut liker qu'une fois une décision
}

model Commentaire {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId // ID de l'utilisateur
  decisionId String   @db.ObjectId // ID de la décision
  contenu    String // Contenu du commentaire
  commentBy  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  decision Decision @relation(fields: [decisionId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([userId, decisionId], name: "userId_decisionId") // Un utilisateur ne peut commenter qu'une fois une décision
  @@index([decisionId]) // Index pour optimiser les requêtes sur les décisions
  @@index([userId]) // Index pour optimiser les requêtes sur les utilisateurs
}


model Juristes {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  notionId    String   @unique
  name        String
  photo       String?
  country     String
  jobTitle    String
  specialties String[]
  email       String   @unique
  experience  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
